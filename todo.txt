TODO


IDEAS

- would it be possible to merge dehydratedcitizens? When 2 transactions commit and see that there is a object-level conflict
 , but not a field level conflict, on a dehydratedcitizen, the transaction aborts and is retried again. But could it be possible to create a new dehydratedcitizen
that is the merged version of the two cells. Since there is no conflict on field level.. could this give isolation problems?

- statisch about which classes/objects/fields has lead to a write conflict.

-changes in arrays are not seen.

- when an object is modified, just like in oracle, the row can be locked exclusive. At the moment nothing is locked,
and conflicts are detected when the transaction commits. But with the lock happening as soon as an update occurs,
the chance of conflicts will decrease (other transactions are not able to make modifications).

- a 'read for update'. When an object is called with the read for update, the object is automatically locked when
it is read. A version with timeout configuration (no wait) could also be added.

-eenvoudig maken dat de beans opgewired kunnen worden vanuit spring bv.

- add qos observation to transactiontemplate.

- instead of waiting for a commit to find out that the transaction can't be comitted, it could be done
sooner. 

- readonly transactions: transactions that don't allow any writes. When to check it? On the commit? Or as soon
as a write occurs.

- nested transaction icm propagation.

- store the current transaction in a threadlocal? For nested transactions this also can be used (transactions can
be stacked).

- optimization. The validate method of Transactionized could do duplicate work for a single commit, because this
method can be called on the same method more than once if the root objects share objects (not uncommon).

- add reason why a transaction is aborted

DONE

